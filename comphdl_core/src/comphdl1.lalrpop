use parser::CompInfo;

grammar;

pub File: Vec<(CompInfo, Vec<CompInfo>)> = {
    CompDef*
};

pub CompCall: CompInfo = {
    <n: Name> <i: Inputs> <o: ("->" <Outputs>)?> => {
        let o = o.unwrap_or(vec![]);
        CompInfo::new(n, i, o)
    },
};

// Definition, for new components
pub CompDef: (CompInfo, Vec<CompInfo>) = {
    "component" <CompCall> "{" <CompBody> "}",
};

pub CompBody: Vec<CompInfo> = {
    <v: BodyStatement*> => {
        v.into_iter().filter_map(|x| x).collect()
    }
};

// Definition body: component calls separated by ";"
pub BodyStatement: Option<CompInfo> = {
    <CompCall> ";" => Some(<>),
    <Assignment> ";" => Some(<>),
    Comment => None,
};

pub Assignment: CompInfo = {
    <a: Outputs> "=" <b: Outputs> => {
        CompInfo::new("actually, I'm just an assignment".into(),
            b,
            a
        )
    }
};

// Right now comments are only allowed inside the body
pub Comment = {
    // C-style (non-nested)
    r"/[*]([^*]|([*][^/]))*[*]/",
    // C++
    r"//.*",
    // Python
    r"#.*",
};

// [a-zA-Z0-9_]
pub Word: String = {
    r"([_\pL][_0-9\pL]*)" => format!("{}", <>),
};

pub Name = Word;

pub Inputs: Vec<String> = {
    // (a, b)
    "(" <BitArrayArgs> ")" => <>.into_iter().flat_map(|x| x).collect()
};

// pub Outputs = Inputs;
pub Outputs: Vec<String> = {
    // (a, b)
    "(" <BitArrayArgs> ")" => <>.into_iter().flat_map(|x| x).collect(),
    // x
    BitArray => <>,
};

pub BitArray: Vec<String> = {
    Word => vec![<>],
    <w: Word> <r: Range> => {
        let mut i = r.0;
        let mut v = vec![];
        let isign = if r.0 < r.1 { 1 } else { -1 };
        while i != r.1 {
            v.push(format!("{}${}", w, i));
            i = i.wrapping_add(isign as u64);
        }
        v.push(format!("{}${}", w, i));

        v
    },
};

pub BitArrayArgs = Comma<BitArray>;

pub Range: (u64, u64) = {
    // [3:0] or [0:3]
    "[" <a: Number> ":" <b: Number> "]" => (a, b),
    // [3] is equivalent to [3:3]
    "[" <a: Number> "]" => (a, a),
};

pub Number: u64 = {
    r"[0-9]+" => <>.parse().unwrap()
};

pub VarArgs = Comma<Word>;

// Matches anything from "" to "a,b,c" or even "a,"
Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};
